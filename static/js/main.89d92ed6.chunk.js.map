{"version":3,"sources":["Icons.js","App.js","serviceWorker.js","index.js"],"names":["roboFill","roboAccent","Robo","props","RoboFace","cls","colorFill","colorAccent","RoboWheel","RoboBase","className","viewBox","fill","xmlns","d","count","cardinals","coordinates","Row","cells","Array","map","item","i","Cell","key","num","row","col","direction","active","prev","turn","bump","inMotion","robot","classArray","push","transitionName","transitionEnterTimeout","transitionLeaveTimeout","id","join","Controls","buttons","dir","type","toLowerCase","onClick","handleTurn","disabled","handleMove","App","state","bind","document","addEventListener","e","keyCode","console","log","currentChange","cord","prevDirection","this","currentDirection","filter","card","setState","setTimeout","parseInt","nextRow","nextCol","rows","href","target","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89d92ed6.chunk.js","sourcesContent":["import React from 'react';\n\nconst roboFill = '#212121';\nconst roboAccent = '#e8e8e8';\n\nfunction Robo(props) {\n    return (\n        <>\n        <RoboFace cls=\"face\" colorFill={props.roboFill ? props.roboFill : roboFill} colorAccent={props.roboAccent ? props.roboAccent : roboAccent} />\n        <RoboWheel cls=\"left-wheel\" />\n        <RoboWheel cls=\"right-wheel\" />\n        <RoboBase cls=\"base\" colorFill={props.roboFill ? props.roboFill : roboFill} />\n        </>\n    );\n};\n\n    function RoboWheel(props) {\n        return (\n            <div className={props.cls ? props.cls : null}>\n                <div className='wheel-front'>\n                </div>\n                <div className='wheel-turned'>\n                </div>\n            </div>\n        );\n    };\n\n    function RoboBase(props) {\n        return (\n            <svg className={props.cls ? props.cls : null} viewBox=\"0 0 259 286\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M83 241H122V286H83V241Z\" fill={props.colorFill}/>\n                <path d=\"M138.772 241H177.772V286H138.772V241Z\" fill={props.colorFill}/>\n                <path d=\"M63.7718 113C63.7718 107.477 68.249 103 73.7718 103H187.772C193.295 103 197.772 107.477 197.772 113V244C197.772 249.523 193.295 254 187.772 254H73.7718C68.249 254 63.7718 249.523 63.7718 244V113Z\" fill={props.colorFill}/>\n                <path d=\"M187.772 187V148H233.772V187H187.772Z\" fill={props.colorFill}/>\n                <path d=\"M243.772 190C231.069 190 220.772 179.703 220.772 167C220.772 154.297 231.069 144 243.772 144C249.395 144 258.272 147 258.544 149.37C259.075 154 233.772 156.5 233.772 167C233.772 177.5 258.544 183 257.572 185.402C256.318 188.5 248.949 190 243.772 190Z\" fill={props.colorFill}/>\n                <path d=\"M26.7718 187L26.7718 148H72.7718V187H26.7718Z\" fill={props.colorFill}/>\n                <path d=\"M15.5519 190C28.2545 190 38.5519 179.703 38.5519 167C38.5519 154.297 28.2545 144 15.5519 144C9.9283 144 1.0519 147 0.780064 149.37C0.249014 154 25.5519 156.5 25.5519 167C25.5519 177.5 0.780064 183 1.75223 185.402C3.00616 188.5 10.3743 190 15.5519 190Z\" fill={props.colorFill}/>\n                <path d=\"M92.7718 51C92.7718 39.9543 101.726 31 112.772 31H143.772C154.818 31 163.772 39.9543 163.772 51V103H92.7718V51Z\" fill={props.colorFill}/>\n                <path d=\"M124 12H133V31H124V12Z\" fill={props.colorFill}/>\n                <path d=\"M136 7.5C136 11.6421 132.642 15 128.5 15C124.358 15 121 11.6421 121 7.5C121 3.35786 124.358 0 128.5 0C132.642 0 136 3.35786 136 7.5Z\" fill={props.colorFill}/>\n            </svg>\n        );\n    };\n\n    function RoboFace(props) {\n        return (\n        <svg className={props.cls ? props.cls : null} viewBox=\"0 0 50 43\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M16.7718 8C16.7718 12.4183 13.1901 16 8.77182 16C4.35354 16 0.77182 12.4183 0.77182 8C0.77182 3.58172 4.35354 0 8.77182 0C13.1901 0 16.7718 3.58172 16.7718 8Z\" className=\"eyes\" fill={props.colorAccent}/>\n            <path d=\"M49.7718 8C49.7718 12.4183 46.1901 16 41.7718 16C37.3535 16 33.7718 12.4183 33.7718 8C33.7718 3.58172 37.3535 0 41.7718 0C46.1901 0 49.7718 3.58172 49.7718 8Z\" className=\"eyes\" fill={props.colorAccent}/>\n            <path d=\"M6.77182 27H42.7718V43H6.77182V27Z\" className=\"mouth\" fill={props.colorAccent}/>\n            <path d=\"M9.77182 27H11.7718V43H9.77182V27Z\" fill={props.colorFill}/>\n            <path d=\"M16.7718 27H18.7718V43H16.7718V27Z\" fill={props.colorFill}/>\n            <path d=\"M23.7718 27H25.7718V43H23.7718V27Z\" fill={props.colorFill}/>\n            <path d=\"M37.7718 27H39.7718V43H37.7718V27Z\" fill={props.colorFill}/>\n            <path d=\"M30.7718 27H32.7718V43H30.7718V27Z\" fill={props.colorFill}/>\n        </svg>\n        );\n    };\n\nexport {Robo};","import React from 'react';\nimport './App.css';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport {Robo} from './Icons';\n\nconst count = 5;\nconst cardinals = ['North', 'South', 'West', 'East'];\nconst coordinates = [[-1, 0], [1, 0], [0, -1], [0, 1]];\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      row: 3,\n      col: 3,\n      direction: [0, 1],\n      active: 'east',\n      prev: null,\n      inMotion: false,\n      turn: false,\n      bump: false,\n    };\n\n    this.handleMove = this.handleMove.bind(this);\n    this.handleTurn = this.handleTurn.bind(this);\n  };\n\n  componentDidMount() {\n    document.addEventListener('keydown', e => {\n      if (!this.state.inMotion) {\n        if (e.keyCode === 32) {\n          console.log(`The spacebar should move the robot forward, but for some reason there seems to be an issue with CSSTransitionGroups. I'm currently looking into it.`);\n          // this.handleMove();\n        } else if (e.keyCode === 37) {\n          this.handleTurn([0, -1]);\n        } else if (e.keyCode === 38) {\n          this.handleTurn([-1, 0]);\n        } else if (e.keyCode === 39) {\n          this.handleTurn([0, 1]);\n        } else if (e.keyCode === 40) {\n          this.handleTurn([1, 0]);\n        };\n      };\n    }, false);\n  };\n\n  handleTurn(dir) {\n    const currentChange = coordinates.map((cord, i) => cord[0] === dir[0] && cord[1] === dir[1] ? i : -1);\n    const prevDirection = this.state.active;\n    const currentDirection = cardinals.filter((card, i) => currentChange[i] > -1).join('').toLowerCase();\n    this.setState({direction: dir, active: currentDirection, prev: prevDirection, turn: true});\n    setTimeout(() => {\n      this.setState({turn: false});\n    }, 500);\n  };\n\n  handleMove() {\n    if (parseInt(this.state.direction[0]) !== 0) {\n      const nextRow = parseInt(this.state.direction[0]) + parseInt(this.state.row);\n      nextRow < 1 || nextRow > count ? this.bump() : this.setState({row: nextRow});\n    } else {\n      const nextCol = parseInt(this.state.direction[1]) + parseInt(this.state.col);\n      nextCol < 1 || nextCol > count ? this.bump() : this.setState({col: nextCol});\n    };\n    this.setState({inMotion: true});\n    setTimeout(() => {\n        this.setState({inMotion: false});\n    }, 1000);\n  };\n\n    bump() {\n      this.setState({bump: true});\n      setTimeout(() => {\n        this.setState({bump: false});\n      }, 1000);\n    };\n\n  render() {\n    const rows = Array(count).fill(null).map((item, i) =>\n      <Row\n        key={`row-${i + 1}`}\n        num={i + 1}\n        row={this.state.row === i + 1 ? this.state.row : false}\n        col={this.state.col}\n        direction={this.state.direction}\n        active={this.state.active}\n        prev={this.state.prev}\n        turn={this.state.turn}\n        bump={this.state.bump}\n        inMotion={this.state.inMotion}\n      />\n    );\n    return (\n      <>\n      <section className='grid-container'>\n        <h1>Robo-Trek</h1>\n        {rows}\n      </section>\n      <Controls\n        active={this.state.active}\n        inMotion={this.state.inMotion}\n        bump={this.state.bump}\n        handleMove={this.handleMove}\n        handleTurn={this.handleTurn}\n      />\n      <footer>\n      <small>by <a href=\"https://www.kylejackson.dev\" target=\"_blank\" rel=\"noopener noreferrer\">kyle jackson</a></small>\n      </footer>\n      </>\n    );\n  };\n};\n\n  function Row(props) {\n    const cells = Array(count).fill(null).map((item, i) =>\n      <Cell\n        key={`row-${props.num}-cell-${i + 1}`}\n        num={i + 1}\n        row={props.row}\n        col={props.row && props.col === i + 1 ? props.col : false}\n        direction={props.direction}\n        active={props.active}\n        prev={props.prev}\n        turn={props.turn}\n        bump={props.bump}\n        inMotion={props.inMotion}\n      />\n    );\n    return (\n      <div className={`row-${props.num}`}>\n        {cells}\n      </div>\n    );\n  };\n\n    function Cell(props) {\n      const robot = props.row && props.col ? true : false;\n      const classArray = [props.active, `prev-${props.prev}`];\n      if (props.bump) {\n        classArray.push('bump');\n      };\n      if (props.turn) {\n        classArray.push('turn');\n      };\n      if (props.inMotion) {\n        classArray.push('zoom');\n      };\n      return (\n        <div className={`cell-${props.num}`}>\n          <CSSTransitionGroup transitionName={`robot-${props.active}`} transitionEnterTimeout={1000} transitionLeaveTimeout={1000}>\n            {robot ?\n              <span id=\"robot\" key=\"robot\" className={classArray.join(' ')}>\n                <Robo />\n              </span> :\n              null\n            }\n          </CSSTransitionGroup>\n        </div>\n      );\n    };\n\n  function Controls(props) {\n    const buttons = cardinals.map((dir, i) =>\n      <button\n        type=\"button\"\n        key={`${dir.toLowerCase()}-btn`}\n        id={dir.toLowerCase()}\n        className={props.active === dir.toLowerCase() ? 'active' : null}\n        onClick={() => props.handleTurn(coordinates[i])}\n        disabled={props.inMotion ? true : null}\n      >\n        <span>{dir === 'North' ? 'N' : dir === 'South' ? 'S' : dir === 'East' ? 'E' : 'W'}</span>\n      </button>\n    );\n    return (\n      <div className=\"controls\">\n        <div className=\"directions\">\n          {buttons}\n        </div>\n        <button type=\"button\" id=\"forward\" onClick={() => props.handleMove()} disabled={props.inMotion ? true : null}>\n          <span>{props.bump ? 'Oww!' : props.inMotion? 'Wee!' : 'GO!'}</span>\n        </button>\n      </div>\n    );\n  };\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}